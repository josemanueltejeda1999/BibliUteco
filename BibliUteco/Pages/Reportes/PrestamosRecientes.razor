@page "/reportes/prestamos-recientes"
@using BibliUteco.Services.Interfaces
@using BibliUteco.Models
@inject IDashboardService DashboardService
@inject IJSRuntime JS

<h3>Préstamos recientes</h3>

@if (cargando)
{
    <p>Cargando...</p>
}
else if (prestamos != null && prestamos.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Libro</th>
                <th>Estudiante</th>
                <th class="text-end">Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in prestamos)
            {
                <tr>
                    <td>@p.FechaPrestamo.ToString("g")</td>
                    <td>@p.Libro?.Titulo</td>
                    <td>@p.Estudiante?.Nombre @p.Estudiante?.Apellido</td>
                    <td class="text-end">@p.Estado</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No hay datos.</p>
}

<div class="mt-3">
    <button class="btn btn-secondary me-2" @onclick="ImprimirReporte">Imprimir</button>
    <button class="btn btn-primary" @onclick="ExportarPDF">Exportar PDF</button>
</div>

@code {
    private List<Prestamo>? prestamos;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        prestamos = await DashboardService.ObtenerPrestamosRecientesAsync(50);
        cargando = false;
    }

    private async Task ImprimirReporte()
    {
        await JS.InvokeVoidAsync("reportes.imprimir");
    }

    private async Task ExportarPDF()
    {
        await JS.InvokeVoidAsync("reportes.exportarPdf");
    }
}