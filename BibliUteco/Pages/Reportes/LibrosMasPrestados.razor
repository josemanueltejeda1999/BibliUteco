@page "/reportes/libros-mas-prestados"
@using BibliUteco.Services.Interfaces
@using BibliUteco.Models
@inject IDashboardService DashboardService
@inject IJSRuntime JS

<h3>Libros más prestados</h3>

@if (cargando)
{
    <p>Cargando...</p>
}
else if (libros != null && libros.Any())
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Título</th>
                    <th>Autor</th>
                    <th>ISBN</th>
                    <th class="text-end">Veces prestado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var l in libros)
                {
                    <tr>
                        <td>@l.Titulo</td>
                        <td>@l.Autor</td>
                        <td>@l.ISBN</td>
                        <td class="text-end">@l.CantidadPrestamos</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>No hay datos para mostrar.</p>
}

<div class="mt-3">
    <button class="btn btn-secondary me-2" @onclick="ImprimirReporte">Imprimir</button>
    <button class="btn btn-primary" @onclick="ExportarPDF">Exportar PDF</button>
</div>

@code {
    private List<LibroMasPrestado>? libros;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        libros = await DashboardService.ObtenerLibrosMasPrestadosAsync(20);
        cargando = false;
    }

    private async Task ImprimirReporte()
    {
        await JS.InvokeVoidAsync("reportes.imprimir");
    }

    private async Task ExportarPDF()
    {
        await JS.InvokeVoidAsync("reportes.exportarPdf");
    }
}