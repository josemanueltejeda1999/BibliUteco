@page "/prestamos"
@using BibliUteco.Models
@using BibliUteco.Services.Interfaces
@inject IPrestamoService PrestamoService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Administrador,Bibliotecario")]

<PageTitle>Préstamos - BibliUteco</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center flex-wrap">
                <div class="mb-3 mb-md-0">
                    <h2 class="fw-bold mb-0">📋 Gestión de Préstamos</h2>
                    <p class="text-muted mb-0">Administra los préstamos de libros</p>
                </div>
                <button class="btn btn-primary" @onclick="IrACrear">
                    <i class="bi bi-plus-circle"></i> Nuevo Préstamo
                </button>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary bg-opacity-10 border-primary">
                <div class="card-body text-center">
                    <h3 class="mb-0">@totalPrestamos</h3>
                    <small class="text-muted">Total Préstamos</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning bg-opacity-10 border-warning">
                <div class="card-body text-center">
                    <h3 class="mb-0">@prestamosActivos</h3>
                    <small class="text-muted">Activos</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger bg-opacity-10 border-danger">
                <div class="card-body text-center">
                    <h3 class="mb-0">@prestamosAtrasados</h3>
                    <small class="text-muted">Atrasados</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success bg-opacity-10 border-success">
                <div class="card-body text-center">
                    <h3 class="mb-0">@prestamosDevueltos</h3>
                    <small class="text-muted">Devueltos</small>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <div class="btn-group" role="group">
                <button class="btn @(filtroActual == "todos" ? "btn-primary" : "btn-outline-primary")" @onclick='() => CambiarFiltro("todos")'>
                    Todos
                </button>
                <button class="btn @(filtroActual == "activos" ? "btn-warning" : "btn-outline-warning")" @onclick='() => CambiarFiltro("activos")'>
                    Activos
                </button>
                <button class="btn @(filtroActual == "atrasados" ? "btn-danger" : "btn-outline-danger")" @onclick='() => CambiarFiltro("atrasados")'>
                    Atrasados
                </button>
                <button class="btn @(filtroActual == "devueltos" ? "btn-success" : "btn-outline-success")" @onclick='() => CambiarFiltro("devueltos")'>
                    Devueltos
                </button>
            </div>
        </div>
    </div>

    @if (prestamos == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando préstamos...</p>
        </div>
    }
    else if (!prestamos.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            <i class="bi bi-info-circle fs-1"></i>
            <h4 class="mt-3">No hay préstamos registrados</h4>
            <p>Comienza registrando un nuevo préstamo haciendo clic en el botón "Nuevo Préstamo"</p>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Estudiante</th>
                                <th>Libro</th>
                                <th>Fecha Préstamo</th>
                                <th>Fecha Devolución</th>
                                <th>Días Restantes</th>
                                <th>Estado</th>
                                <th>Multa</th>
                                <th class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var prestamo in prestamos)
                            {
                                var diasRestantes = (prestamo.FechaDevolucionEsperada - DateTime.Now).Days;
                                <tr>
                                    <td><strong>#@prestamo.PrestamoId</strong></td>
                                    <td>
                                        <strong>@prestamo.Estudiante?.NombreCompleto</strong><br />
                                        <small class="text-muted">@prestamo.Estudiante?.Matricula</small>
                                    </td>
                                    <td>
                                        <strong>@prestamo.Libro?.Titulo</strong><br />
                                        <small class="text-muted">@prestamo.Libro?.Autor?.NombreCompleto</small>
                                    </td>
                                    <td>@prestamo.FechaPrestamo.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        @prestamo.FechaDevolucionEsperada.ToString("dd/MM/yyyy")
                                        @if (prestamo.FechaDevolucionReal.HasValue)
                                        {
                                            <br />
                                            <small class="text-success">Devuelto: @prestamo.FechaDevolucionReal.Value.ToString("dd/MM/yyyy")</small>
                                        }
                                    </td>
                                    <td>
                                        @if (prestamo.Estado == "Devuelto")
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                        else if (diasRestantes < 0)
                                        {
                                            <span class="badge bg-danger">@Math.Abs(diasRestantes) días atrasado</span>
                                        }
                                        else if (diasRestantes == 0)
                                        {
                                            <span class="badge bg-warning">Vence hoy</span>
                                        }
                                        else if (diasRestantes <= 3)
                                        {
                                            <span class="badge bg-warning">@diasRestantes días</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">@diasRestantes días</span>
                                        }
                                    </td>
                                    <td>
                                        @if (prestamo.Estado == "Prestado")
                                        {
                                            <span class="badge bg-warning">Prestado</span>
                                        }
                                        else if (prestamo.Estado == "Devuelto")
                                        {
                                            <span class="badge bg-success">Devuelto</span>
                                        }
                                        else if (prestamo.Estado == "Atrasado")
                                        {
                                            <span class="badge bg-danger">Atrasado</span>
                                        }
                                    </td>
                                    <td>
                                        @if (prestamo.MultaPorRetraso.HasValue && prestamo.MultaPorRetraso > 0)
                                        {
                                            <span class="text-danger fw-bold">RD$ @prestamo.MultaPorRetraso.Value.ToString("N2")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-primary" @onclick="() => IrADetalles(prestamo.PrestamoId)" title="Ver detalles">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            @if (prestamo.Estado != "Devuelto")
                                            {
                                                <button class="btn btn-outline-success" @onclick="() => DevolverLibro(prestamo)" title="Devolver">
                                                    <i class="bi bi-check-circle"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-danger" @onclick="() => ConfirmarEliminar(prestamo)" title="Eliminar">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <p class="text-muted">Mostrando: <strong>@prestamos.Count</strong> préstamos</p>
        </div>
    }
</div>

@code {
    private List<Prestamo>? prestamos;
    private List<Prestamo>? todosLosPrestamos;
    private string filtroActual = "todos";

    private int totalPrestamos = 0;
    private int prestamosActivos = 0;
    private int prestamosAtrasados = 0;
    private int prestamosDevueltos = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarPrestamos();
    }

    private async Task CargarPrestamos()
    {
        todosLosPrestamos = await PrestamoService.ObtenerTodosAsync();
        CalcularEstadisticas();
        AplicarFiltro();
    }

    private void CalcularEstadisticas()
    {
        if (todosLosPrestamos == null) return;

        totalPrestamos = todosLosPrestamos.Count;
        prestamosActivos = todosLosPrestamos.Count(p => p.Estado == "Prestado" || p.Estado == "Atrasado");
        prestamosAtrasados = todosLosPrestamos.Count(p => p.EstaAtrasado);
        prestamosDevueltos = todosLosPrestamos.Count(p => p.Estado == "Devuelto");
    }

    private void AplicarFiltro()
    {
        if (todosLosPrestamos == null) return;

        prestamos = filtroActual switch
        {
            "activos" => todosLosPrestamos.Where(p => p.Estado == "Prestado" || p.Estado == "Atrasado").ToList(),
            "atrasados" => todosLosPrestamos.Where(p => p.EstaAtrasado).ToList(),
            "devueltos" => todosLosPrestamos.Where(p => p.Estado == "Devuelto").ToList(),
            _ => todosLosPrestamos
        };
    }

    private void CambiarFiltro(string filtro)
    {
        filtroActual = filtro;
        AplicarFiltro();
    }

    private void IrACrear()
    {
        Navigation.NavigateTo("/prestamos/crear");
    }

    private void IrADetalles(int id)
    {
        Navigation.NavigateTo($"/prestamos/detalles/{id}");
    }

    private async Task DevolverLibro(Prestamo prestamo)
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm",
            $"¿Confirmar devolución del libro '{prestamo.Libro?.Titulo}'?");

        if (confirmado)
        {
            var resultado = await PrestamoService.DevolverLibroAsync(prestamo.PrestamoId);
            if (resultado)
            {
                await JS.InvokeVoidAsync("alert", "Libro devuelto exitosamente");
                await CargarPrestamos();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error al devolver el libro. Intente nuevamente.");
            }
        }
    }

    private async Task ConfirmarEliminar(Prestamo prestamo)
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar este préstamo?");

        if (confirmado)
        {
            var resultado = await PrestamoService.EliminarAsync(prestamo.PrestamoId);
            if (resultado)
            {
                await JS.InvokeVoidAsync("alert", "Préstamo eliminado exitosamente");
                await CargarPrestamos();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Error al eliminar el préstamo.");
            }
        }
    }
}