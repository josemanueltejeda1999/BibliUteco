@page "/autores/detalles/{Id:int}"
@using BibliUteco.Models
@using BibliUteco.Services.Interfaces
@inject IAutorService AutorService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Administrador,Bibliotecario")]

<PageTitle>Detalles del Autor - BibliUteco</PageTitle>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            @if (autor == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-3 text-muted">Cargando datos del autor...</p>
                </div>
            }
            else
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-info text-white">
                        <h3 class="mb-0"><i class="bi bi-person-badge"></i> Detalles del Autor</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <h5 class="text-muted mb-3">Información Personal</h5>

                                <div class="mb-3">
                                    <label class="fw-bold text-muted small">ID</label>
                                    <p class="mb-0">@autor.AutorId</p>
                                </div>

                                <div class="mb-3">
                                    <label class="fw-bold text-muted small">Nombre Completo</label>
                                    <p class="mb-0 fs-5">@autor.NombreCompleto</p>
                                </div>

                                <div class="mb-3">
                                    <label class="fw-bold text-muted small">Nacionalidad</label>
                                    <p class="mb-0">@(autor.Nacionalidad ?? "No especificada")</p>
                                </div>

                                <div class="mb-3">
                                    <label class="fw-bold text-muted small">Fecha de Nacimiento</label>
                                    <p class="mb-0">@(autor.FechaNacimiento?.ToString("dd/MM/yyyy") ?? "No especificada")</p>
                                </div>

                                <div class="mb-3">
                                    <label class="fw-bold text-muted small">Estado</label>
                                    <p class="mb-0">
                                        @if (autor.Activo)
                                        {
                                            <span class="badge bg-success">Activo</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactivo</span>
                                        }
                                    </p>
                                </div>

                                <div class="mb-3">
                                    <label class="fw-bold text-muted small">Fecha de Registro</label>
                                    <p class="mb-0">@autor.FechaCreacion.ToString("dd/MM/yyyy HH:mm")</p>
                                </div>
                            </div>

                            <div class="col-md-6 mb-4">
                                <h5 class="text-muted mb-3">Biografía</h5>
                                <p class="text-justify">
                                    @(string.IsNullOrWhiteSpace(autor.Biografia) ? "Sin biografía disponible" : autor.Biografia)
                                </p>
                            </div>
                        </div>

                        <hr />

                        <div class="mb-4">
                            <h5 class="text-muted mb-3">
                                <i class="bi bi-book"></i> Libros del Autor
                                <span class="badge bg-primary">@(autor.Libros?.Count ?? 0)</span>
                            </h5>

                            @if (autor.Libros == null || !autor.Libros.Any())
                            {
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle"></i> Este autor no tiene libros registrados aún.
                                </div>
                            }
                            else
                            {
                                <div class="table-responsive">
                                    <table class="table table-sm table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Título</th>
                                                <th>ISBN</th>
                                                <th>Editorial</th>
                                                <th>Año</th>
                                                <th>Estado</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var libro in autor.Libros)
                                            {
                                                <tr>
                                                    <td>@libro.Titulo</td>
                                                    <td><code>@libro.ISBN</code></td>
                                                    <td>@libro.Editorial</td>
                                                    <td>@libro.AñoPublicacion</td>
                                                    <td>
                                                        @if (libro.Activo)
                                                        {
                                                            <span class="badge bg-success">Activo</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary">Inactivo</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        </div>

                        <hr />

                        <div class="d-flex justify-content-between">
                            <button class="btn btn-secondary" @onclick="Volver">
                                <i class="bi bi-arrow-left"></i> Volver
                            </button>
                            <div>
                                <button class="btn btn-warning me-2" @onclick="IrAEditar">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <button class="btn btn-danger" @onclick="ConfirmarEliminar">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Autor? autor;

    protected override async Task OnInitializedAsync()
    {
        await CargarAutor();
    }

    private async Task CargarAutor()
    {
        autor = await AutorService.ObtenerPorIdAsync(Id);

        if (autor == null)
        {
            await JS.InvokeVoidAsync("alert", "Autor no encontrado");
            Navigation.NavigateTo("/autores");
        }
    }

    private void Volver()
    {
        Navigation.NavigateTo("/autores");
    }

    private void IrAEditar()
    {
        Navigation.NavigateTo($"/autores/editar/{Id}");
    }

    private async Task ConfirmarEliminar()
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar al autor '{autor!.NombreCompleto}'?");

        if (confirmado)
        {
            var resultado = await AutorService.EliminarAsync(Id);
            if (resultado)
            {
                await JS.InvokeVoidAsync("alert", "Autor eliminado exitosamente");
                Navigation.NavigateTo("/autores");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "No se pudo eliminar el autor. Puede que tenga libros asociados.");
            }
        }
    }
}