@page "/categorias"
@using BibliUteco.Models
@using BibliUteco.Services.Interfaces
@inject ICategoriaService CategoriaService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Administrador,Bibliotecario")]

<PageTitle>Categorías - BibliUteco</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="fw-bold mb-0">📂 Gestión de Categorías</h2>
                    <p class="text-muted mb-0">Administra las categorías de libros</p>
                </div>
                <button class="btn btn-primary" @onclick="IrACrear">
                    <i class="bi bi-plus-circle"></i> Nueva Categoría
                </button>
            </div>
        </div>
    </div>

    @if (categorias == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando categorías...</p>
        </div>
    }
    else if (!categorias.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            <i class="bi bi-info-circle fs-1"></i>
            <h4 class="mt-3">No hay categorías registradas</h4>
            <p>Comienza agregando una nueva categoría haciendo clic en el botón "Nueva Categoría"</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var categoria in categorias)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm hover-shadow">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h5 class="card-title mb-0">
                                    <i class="bi bi-folder text-primary"></i> @categoria.Nombre
                                </h5>
                                @if (categoria.Activo)
                                {
                                    <span class="badge bg-success">Activo</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactivo</span>
                                }
                            </div>

                            <p class="card-text text-muted small">
                                @(string.IsNullOrWhiteSpace(categoria.Descripcion) ? "Sin descripción" : categoria.Descripcion)
                            </p>

                            <div class="mb-3">
                                <span class="badge bg-info">
                                    <i class="bi bi-book"></i> @(categoria.Libros?.Count ?? 0) libros
                                </span>
                            </div>

                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-primary flex-fill" @onclick="() => IrADetalles(categoria.CategoriaId)">
                                    <i class="bi bi-eye"></i> Ver
                                </button>
                                <button class="btn btn-sm btn-outline-warning flex-fill" @onclick="() => IrAEditar(categoria.CategoriaId)">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmarEliminar(categoria)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="mt-3">
            <p class="text-muted">Total de categorías: <strong>@categorias.Count</strong></p>
        </div>
    }
</div>

<style>
    .hover-shadow {
        transition: box-shadow 0.3s ease;
    }
    .hover-shadow:hover {
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }
</style>

@code {
    private List<Categoria>? categorias;

    protected override async Task OnInitializedAsync()
    {
        await CargarCategorias();
    }

    private async Task CargarCategorias()
    {
        categorias = await CategoriaService.ObtenerTodosAsync();
    }

    private void IrACrear()
    {
        Navigation.NavigateTo("/categorias/crear");
    }

    private void IrADetalles(int id)
    {
        Navigation.NavigateTo($"/categorias/detalles/{id}");
    }

    private void IrAEditar(int id)
    {
        Navigation.NavigateTo($"/categorias/editar/{id}");
    }

    private async Task ConfirmarEliminar(Categoria categoria)
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm",
            $"¿Está seguro de eliminar la categoría '{categoria.Nombre}'?");

        if (confirmado)
        {
            var resultado = await CategoriaService.EliminarAsync(categoria.CategoriaId);
            if (resultado)
            {
                await JS.InvokeVoidAsync("alert", "Categoría eliminada exitosamente");
                await CargarCategorias();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "No se pudo eliminar la categoría. Puede que tenga libros asociados.");
            }
        }
    }
}